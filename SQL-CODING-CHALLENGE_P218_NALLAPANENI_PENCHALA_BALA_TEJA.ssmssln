CREATE DATABASE ecommerce;
use ecommerce;

-- 1.Create customers table(ASSUMPTION -AS THERE IS NO ADDRESS IN THE CUSTOMERS TABLE BUT IN THE GIVEN DATA CONATINS ADDRESS VALUES BUT NO PASSWORD ,
                           --RAGHUL SIR TOLD TO ADD A NEW COLUMN CALLED ADDRESS IN THE CUSTOMERS TABLE AND I HAVE PASSED VALUES INTO THE PASSWORD ACCORDINGLY)    
CREATE TABLE customer (
    customer_id INT PRIMARY KEY,
    name VARCHAR(50),
    email VARCHAR(50) not null,
	address varchar(50),
    password VARCHAR(50)
);
--Insert values into customers Table
INSERT INTO customer (customer_id, name, email,address, password) VALUES
(1, 'John Doe', 'johndoe@example.com', '123 Main St, City','123joe'),
(2, 'Jane Smith', 'janesmith@example.com', '456 Elm St, Town','456jane'),
(3, 'Robert Johnson', 'robert@example.com', '789 Oak St, Village','789rob'),
(4, 'Sarah Brown', 'sarah@example.com', '101 Pine St, Suburb','345sara'),
(5, 'David Lee', 'david@example.com', '234 Cedar St, District','734lee'),
(6, 'Laura Hall', 'laura@example.com', '567 Birch St, County','675laura'),
(7, 'Michael Davis', 'michael@example.com', '890 Maple St, State','765davis'),
(8, 'Emma Wilson', 'emma@example.com', '321 Redwood St, Country','848emma'),
(9, 'William Taylor', 'william@example.com', '432 Spruce St, Province','876will'),
(10, 'Olivia Adams', 'olivia@example.com', '765 Fir St, Territory','101adams');
select * from customer;

-- 2.Create products table
CREATE TABLE product (
    product_id INT PRIMARY KEY,
    name VARCHAR(50),
    price DECIMAL(8, 2),
    description TEXT,
    stockQuantity INT
);
--Insert values into products Table
INSERT INTO product (product_id, name, price, description, stockQuantity) VALUES
(1, 'Laptop', 800.00, 'High-performance laptop', 10),
(2, 'Smartphone', 600.00, 'Latest smartphone', 15),
(3, 'Tablet', 300.00, 'Portable tablet', 20),
(4, 'Headphones', 150.00, 'Noise-canceling', 30),
(5, 'TV', 900.00, '4K Smart TV', 5),
(6, 'Coffee Maker', 50.00, 'Automatic coffee maker', 25),
(7, 'Refrigerator', 700.00, 'Energy-efficient', 10),
(8, 'Microwave Oven', 80.00, 'Countertop microwave', 15),
(9, 'Blender', 70.00, 'High-speed blender', 20),
(10, 'Vacuum Cleaner', 120.00, 'Bagless vacuum cleaner', 10);
select * from product;



-- 3.Create cart table
CREATE TABLE carts (
    cart_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (product_id) REFERENCES product(product_id)
);
--Insert values into cart Table
INSERT INTO carts (cart_id, customer_id, product_id, quantity) VALUES
(1, 1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 3),
(4, 3, 4, 4),
(5, 3, 5, 2),
(6, 4, 6, 1),
(7, 5, 1, 1),
(8, 6, 10, 2),
(9, 6, 9, 3),
(10, 7, 7, 2);
select * from carts;


--4.Create orders table(ASSUMPTION - AS THERE IS NO SHOPPING ADDRESS GIVEN IN THA DATA,I HAVE ASSIGNED SOME RANDOM VALUES INTO IT)
CREATE TABLE orderss (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_price DECIMAL(8, 2),
    shipping_address VARCHAR(50),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
);
--Insert values into orders Table
INSERT INTO orderss (order_id, customer_id, order_date, total_price, shipping_address) VALUES
(1, 1, '2023-01-05', 1200.00, '123 MG Road, Mumbai'),
(2, 2, '2023-02-10', 900.00, '456 Connaught Place, Delhi'),
(3, 3, '2023-03-15', 300.00, '789 Brigade Road, Bengaluru'),
(4, 4, '2023-04-20', 150.00, '101 Banjara Hills, Hyderabad'),
(5, 5, '2023-05-25', 1800.00, '234 Marina Beach, Chennai'),
(6, 6, '2023-06-30', 400.00, '567 Park Street, Kolkata'),
(7, 7, '2023-07-05', 700.00, '890 FC Road, Pune'),
(8, 8, '2023-08-10', 160.00, '321 MI Road, Jaipur'),
(9, 9, '2023-09-15', 140.00, '432 CG Road, Ahmedabad'),
(10, 10, '2023-10-20', 1400.00, '765 MG Road, Kochi');
select * from orderss;

--5.Create order_items table(ASSUMPTION - AS THERE IS NO ITEMAMOUNT CREATED DURING THE TABLE CREATION,
                           --BUT WHILE PASSING THE VALUES THERE IS ITEMAMOUNT,SO I PASSED ITEMAMOUNT WHILE CREATING THE TABLE) 
CREATE TABLE order_item (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
	itemamount DECIMAL(8, 2),
    FOREIGN KEY (order_id) REFERENCES orderss(order_id),
    FOREIGN KEY (product_id) REFERENCES product(product_id)
);
--Insert values into orders_items Table
INSERT INTO order_item (order_item_id, order_id, product_id, quantity, itemAmount) VALUES
(1, 1, 1, 2, 1600.00),
(2, 1, 3, 1, 300.00),
(3, 2, 2, 3, 1800.00),
(4, 3, 5, 2, 1800.00),
(5, 4, 4, 4, 600.00),
(6, 4, 6, 1, 50.00),
(7, 5, 1, 1, 800.00),
(8, 5, 2, 2, 1200.00),
(9, 6, 10, 2, 240.00),
(10, 6, 9, 3, 210.00);
select * from order_item;


--SQL QUERIES

--1. Update refrigerator product price to 800.
UPDATE product SET price = 800.00 WHERE name = 'Refrigerator';

--2. Remove all cart items for a specific customer.
DELETE FROM carts
WHERE customer_id =7;


--3. Retrieve Products Priced Below $100.
SELECT * FROM product WHERE price < 100.00;

--4. Find Products with Stock Quantity Greater Than 5
SELECT * FROM product WHERE stockQuantity > 5;

--5. Retrieve Orders with Total Amount Between $500 and $1000.
SELECT * FROM orderss WHERE total_price BETWEEN 500.00 AND 1000.00;

--6. Find Products which name end with letter ‘r’.
SELECT * FROM product WHERE name LIKE '%r';

--7. Retrieve Cart Items for Customer 5.
SELECT * FROM carts WHERE customer_id = 5;

--8. Find Customers Who Placed Orders in 2023.
SELECT *
FROM customer
JOIN orderss ON customer.customer_id = orderss.customer_id
WHERE YEAR(order_date) = 2023;

--9. Determine the Minimum Stock Quantity for Each Product Category.
SELECT MIN(stockQuantity) AS min_stock_quantity FROM product;

--10. Calculate the Total Amount Spent by Each Customer.
SELECT customer.customer_id, customer.name, SUM(orderss.total_price) AS total_spent
FROM customer
JOIN orderss ON customer.customer_id = orderss.customer_id
GROUP BY customer.customer_id, customer.name;

--11. Find the Average Order Amount for Each Customer.
SELECT customer.customer_id, customer.name, AVG(orderss.total_price) AS average_order_amount
FROM customer
JOIN orderss ON customer.customer_id = orderss.customer_id
GROUP BY customer.customer_id, customer.name;


--12. Count the Number of Orders Placed by Each Customer.
SELECT customer.customer_id, customer.name, COUNT(orderss.order_id) AS order_count
FROM customer
JOIN orderss ON customer.customer_id = orderss.customer_id
GROUP BY customer.customer_id, customer.name;


--13. Find the Maximum Order Amount for Each Customer.
SELECT customer.customer_id, customer.name, MAX(orderss.total_price) AS max_order_amount
FROM customer
JOIN orderss ON customer.customer_id = orderss.customer_id
GROUP BY customer.customer_id, customer.name;


--14. Get Customers Who Placed Orders Totaling Over $1000.
SELECT customer.customer_id, customer.name, SUM(orderss.total_price) AS total_spent
FROM customer
JOIN orderss ON customer.customer_id = orderss.customer_id
GROUP BY customer.customer_id, customer.name
HAVING SUM(orderss.total_price) > 1000.00;

--15. Subquery to Find Products Not in the Cart.
SELECT * FROM product WHERE product_id NOT IN (SELECT product_id FROM carts);

--16. Subquery to Find Customers Who Haven't Placed Orders
SELECT * FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM orderss);


--17. Subquery to Calculate the Percentage of Total Revenue for a Product.
SELECT SUM(order_item.quantity * product.price) AS total_revenue
FROM order_item
JOIN product ON order_item.product_id = product.product_id;


--18. Subquery to Find Products with Low Stock.
SELECT * FROM product
WHERE stockQuantity < (SELECT AVG(stockQuantity) FROM product);


--19. Subquery to Find Customers Who Placed High-Value Orders.
SELECT * FROM customer
WHERE customer_id IN (SELECT customer_id FROM orderss WHERE total_price > 1000.00);










